#pragma once
#include <winrt/Windows.Graphics.Display.h>
#include "Dx11BackEnd.g.h"

#include "Common\StepTimer.h"
#include "Common\DeviceResources.h"
#include "SpinningCubeMain.h"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::ProtoWRC::implementation
{
	struct Dx11BackEnd : Dx11BackEndT<Dx11BackEnd>
	{
		Dx11BackEnd();
		~Dx11BackEnd();

		void Initialize(int32_t _width, int32_t _height);
		void SetSwapChainToBackEnd(winrt::Microsoft::UI::Xaml::Controls::SwapChainPanel const& _panel);
		void StartRendering();
		void StopRendering();
		void SetPointer(winrt::Microsoft::UI::Input::PointerPoint const& _p);

		void swapChainPanel_PointerPressed(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e);
		void swapChainPanel_PointerMoved(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e);
		void swapChainPanel_PointerReleased(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e);

		// SCP size
		double Width() { return m_width; }; void Width(double value) { m_width = value; };
		double Height() { return m_height; }; void Height(double value) { m_height = value; };
		// Pointer Position
		float Px() { return m_px; }; void Px(float value) { m_px = value; };
		float Py() { return m_py; }; void Py(float value) { m_py = value; };

		winrt::event_token CollectionChanged(winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedEventHandler const& handler);
		void CollectionChanged(winrt::event_token const& token) noexcept;
	private:
		std::shared_ptr<winrt::Microsoft::UI::Xaml::Controls::SwapChainPanel> m_scp = nullptr;
		float m_px = 0.0f, m_py = 0.0f;
		double m_width = 1366.0, m_height = 768.0;
		winrt::Microsoft::UI::Input::PointerPoint m_p;
		// Window event handlers.
		void OnVisibilityChanged(winrt::Windows::UI::Core::CoreWindow const& sender, winrt::Windows::UI::Core::VisibilityChangedEventArgs const& args);

		// DisplayInformation event handlers.
		void OnDpiChanged(winrt::Windows::Graphics::Display::DisplayInformation const& sender, winrt::Windows::Foundation::IInspectable const& args);
		void OnOrientationChanged(winrt::Windows::Graphics::Display::DisplayInformation const& sender, winrt::Windows::Foundation::IInspectable const& args);
		void OnDisplayContentsInvalidated(winrt::Windows::Graphics::Display::DisplayInformation const& sender, winrt::Windows::Foundation::IInspectable const& args);

		// Other event handlers.
		void OnCompositionScaleChanged(winrt::Microsoft::UI::Xaml::Controls::SwapChainPanel const& sender, winrt::Windows::Foundation::IInspectable const& args);
		void OnSwapChainPanelSizeChanged(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::SizeChangedEventArgs const& e);

		// Track our independent input on a background worker thread.
		winrt::Windows::Foundation::IAsyncAction m_inputLoopWorker = nullptr;
		winrt::Microsoft::UI::Input::InputPointerSource m_coreInput = nullptr;
		// Independent input handling functions.
		void SwapChainPanel_OnPointerPressed(winrt::Microsoft::UI::Input::InputPointerSource const& sender, winrt::Microsoft::UI::Input::PointerEventArgs const& e);
		void SwapChainPanel_OnPointerMoved(winrt::Microsoft::UI::Input::InputPointerSource const& sender, winrt::Microsoft::UI::Input::PointerEventArgs const& e);
		void SwapChainPanel_OnPointerReleased(winrt::Microsoft::UI::Input::InputPointerSource const& sender, winrt::Microsoft::UI::Input::PointerEventArgs const& e);
		// XAML low-level rendering event handler.
		// Resources used to render the DirectX content in the XAML page background.
		std::shared_ptr<DX::DeviceResources> m_deviceResources = nullptr;
		std::unique_ptr<WRCClient::SpinningCubeMain> m_main = nullptr;
		bool m_windowVisible = true;
	};
}
namespace winrt::ProtoWRC::factory_implementation
{
	struct Dx11BackEnd : Dx11BackEndT<Dx11BackEnd, implementation::Dx11BackEnd>
	{
	};
}
